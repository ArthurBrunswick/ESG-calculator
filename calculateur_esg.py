"""
Calculateur de Carri√®re ESG - Institut d'√âconomie Durable
Application Streamlit pour l'orientation professionnelle dans les m√©tiers de l'ESG
Version MVP 2.0 - Refonte avec s√©lection par tags
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import requests
import json
import hubspot
import numpy as np
import logging
from hubspot.crm.contacts import SimplePublicObjectInputForCreate, SimplePublicObjectInput, ApiException

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/calculateur_esg.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("calculateur_esg")

# ----- CONFIGURATION DE L'APPLICATION -----
def configure_app():
    """Configure l'application Streamlit avec les param√®tres de base."""
    st.set_page_config(
        page_title="Calculateur ESG - Institut d'√âconomie Durable",
        page_icon="üå±",
        layout="wide"
    )
    
    # Ajouter un script JavaScript pour scroller en haut de la page si n√©cessaire
    if st.session_state.get('scroll_to_top', False):
        st.session_state.scroll_to_top = False  # R√©initialiser le flag
        js = '''
        <script>
            // Solution plus robuste pour le d√©filement
            window.addEventListener('load', function() {
                window.scrollTo(0, 0);
                // M√©thode alternative pour Safari et certains navigateurs
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            });
            // Ex√©cuter imm√©diatement aussi
            window.scrollTo({top: 0, behavior: 'auto'});
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        </script>
        '''
        st.markdown(js, unsafe_allow_html=True)
    
    # D√©finition des couleurs
    st.session_state.setdefault('colors', {
        'primary': "#0356A5",     # Bleu fonc√©
        'secondary': "#FFE548",   # Jaune
        'green': "#00916E",       # Vert
        'background': "#f7f7f5"   # Fond gris
    })
    
    # CSS am√©lior√©
    colors = st.session_state.colors
    st.markdown(f"""
    <style>
    .main {{
        background-color: {colors['background']};
    }}
    .stButton>button {{
        background-color: {colors['secondary']};
        color: #003366;
        font-weight: bold;
        border-radius: 5px;
        border: none;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }}
    .stButton>button:hover {{
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }}
    .progress-bar {{
        height: 10px;
        background-color: #E0E0E0;
        border-radius: 5px;
        margin-bottom: 20px;
    }}
    .progress-bar-fill {{
        height: 100%;
        background-color: {colors['secondary']};
        border-radius: 5px;
    }}
    .highlight-box {{
        padding: 20px;
        border-radius: 10px;
        background-color: white;
        color: #333333;
        border-left: 5px solid {colors['primary']};
        margin: 20px 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }}
    .feature-card {{
        padding: 15px;
        border-radius: 10px;
        background-color: white;
        color: #333333;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        border-top: 3px solid {colors['secondary']};
    }}
    .tag-selector {{
        display: inline-block;
        margin: 5px;
        padding: 8px 15px;
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.2s;
    }}
    .tag-selector:hover {{
        border-color: {colors['primary']};
    }}
    .tag-selected {{
        background-color: {colors['primary']};
        color: white;
        border-color: {colors['primary']};
    }}
    div[data-testid="stCheckbox"] {{
        background-color: white;
        border-radius: 8px;
        padding: 2px 10px;
        margin: 4px;
        border: 1px solid #e6e6e6;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        transition: all 0.2s;
    }}
    div[data-testid="stCheckbox"]:hover {{
        border-color: {colors['primary']};
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }}
    div[data-testid="stCheckbox"] > label > div[data-testid="stMarkdownContainer"] {{
        font-size: 15px;
    }}
    /* Pour les cases coch√©es */
    div[data-testid="stCheckbox"] label:has(input:checked) {{
        font-weight: 600;
        color: {colors['primary']};
    }}
    .metier-card {{
        padding: 15px;
        border-radius: 10px;
        background-color: white;
        margin-bottom: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        border-left: 3px solid {colors['primary']};
        cursor: pointer;
        transition: all 0.2s;
    }}
    .metier-card:hover {{
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }}
    h1, h2, h3 {{
        color: {colors['primary']} !important;
    }}
    /* Fix pour le mode dark et GitHub */
    .dark .highlight-box, .dark .feature-card, .dark .metier-card, .dark .tag-selector, .dark .interest-tag {{
        background-color: rgba(255, 255, 255, 0.1);
        color: #FFFFFF;
    }}
    .dark .interest-tag.selected {{
        background-color: rgba(3, 86, 165, 0.3);
    }}
    [data-testid="stMarkdownContainer"] {{
        color: currentColor !important;
    }}
    /* Force blue headers on GitHub */
    .markdown-body h1, .markdown-body h2, .markdown-body h3, 
    .markdown-body h4, .markdown-body h5, .markdown-body h6 {{
        color: {colors['primary']} !important;
    }}
    </style>
    """, unsafe_allow_html=True)

# ----- GESTION DE L'√âTAT DE L'APPLICATION -----
def initialize_session_state():
    """Initialise l'√©tat de la session avec les valeurs par d√©faut."""
    default_values = {
        'page': 'accueil',        # Page actuelle
        'user_data': {            # Donn√©es utilisateur minimales
            'prenom': "",
            'nom': "",
            'email': "",
            'telephone': "",
            'opt_in': True,       # Case √† cocher RGPD coch√©e par d√©faut
            'tags': [],           # Tags d'int√©r√™t s√©lectionn√©s
            'entreprises': [],    # Types d'entreprises s√©lectionn√©s
            'metiers_matches': [], # M√©tiers correspondant aux tags
            'metier_selectionne': "", # M√©tier s√©lectionn√© pour la page d√©taill√©e
            'hubspot_submitted': False  # Indicateur d'envoi √† Hubspot
        },
        'data_loaded': False,     # Indicateur de chargement des donn√©es
        'data': {},               # Donn√©es charg√©es
        'selected_tags': [],      # Tags s√©lectionn√©s
        'selected_entreprises': [], # Types d'entreprises s√©lectionn√©s
        'email_submitted': False,  # Indicateur de soumission d'email
        'scroll_to_top': True     # Indicateur de d√©filement automatique vers le haut (activ√© par d√©faut)
    }
    
    # Initialiser les valeurs manquantes uniquement
    for key, value in default_values.items():
        if key not in st.session_state:
            st.session_state[key] = value
            
    # S'assurer que tous les champs user_data existent
    if 'user_data' in st.session_state:
        for field, default in default_values['user_data'].items():
            if field not in st.session_state.user_data:
                st.session_state.user_data[field] = default

def change_page(page_name):
    """Change la page actuelle et force le rechargement."""
    # La solution la plus simple: stocker un flag pour dire √† la nouvelle page de scroller en haut
    st.session_state.page = page_name
    st.session_state.scroll_to_top = True
    st.rerun()

# ----- INT√âGRATION HUBSPOT -----
def send_data_to_hubspot(user_data):
    """
    Envoie les donn√©es utilisateur √† Hubspot via l'API.
    
    Args:
        user_data: Dictionnaire contenant les donn√©es de l'utilisateur
    
    Returns:
        bool: True si l'envoi est r√©ussi, sinon l√®ve une exception
    """
    try:
        # R√©cup√©rer la cl√© API depuis les secrets
        api_key = st.secrets["hubspot"]["api_key"]
        
        # Initialiser le client Hubspot avec token d'acc√®s
        client = hubspot.Client.create(access_token=api_key)
        
        # Pr√©parer les propri√©t√©s pour l'API Hubspot (UNIQUEMENT les informations de base)
        properties = {
            "firstname": user_data.get('prenom', ''),
            "lastname": user_data.get('nom', ''), 
            "email": user_data.get('email', ''),
            "phone": user_data.get('telephone', ''),
            "hs_marketable_status": True  # Toujours envoyer True √† Hubspot
        }
        
        # NE PAS envoyer les tags ni le m√©tier s√©lectionn√© √† Hubspot
        
        # Rechercher si le contact existe d√©j√†
        existing_contact = None
        try:
            # Utiliser l'API pour rechercher par email
            filter_groups = [{"filters": [{"propertyName": "email", "operator": "EQ", "value": user_data.get('email')}]}]
            public_object_search_request = {"filterGroups": filter_groups}
            contact_search_results = client.crm.contacts.search_api.do_search(public_object_search_request=public_object_search_request)
            
            # V√©rifier s'il y a des r√©sultats
            if contact_search_results.results and len(contact_search_results.results) > 0:
                existing_contact = contact_search_results.results[0]
        except Exception as search_error:
            # Si la recherche √©choue, continuer pour cr√©er un nouveau contact
            logger.warning(f"Erreur de recherche contact: {str(search_error)}")
            pass

        # Mettre √† jour le contact existant ou en cr√©er un nouveau
        if existing_contact:
            # Mettre √† jour le contact existant
            contact_id = existing_contact.id
            simple_public_object_input = SimplePublicObjectInput(properties=properties)
            api_response = client.crm.contacts.basic_api.update(contact_id=contact_id, simple_public_object_input=simple_public_object_input)
            logger.info(f"Contact mis √† jour dans Hubspot: {contact_id}")
        else:
            # Cr√©er un nouveau contact
            simple_public_object_input_for_create = SimplePublicObjectInputForCreate(properties=properties)
            api_response = client.crm.contacts.basic_api.create(simple_public_object_input_for_create=simple_public_object_input_for_create)
            logger.info(f"Nouveau contact cr√©√© dans Hubspot: {api_response.id}")
        
        return True
    except Exception as e:
        # Journaliser l'erreur mais la remonter pour gestion
        logger.error(f"Erreur lors de l'envoi des donn√©es √† Hubspot: {str(e)}")
        raise e

# ----- GESTION DES DONN√âES -----
def load_data():
    """Charge les donn√©es depuis le fichier Excel."""
    if st.session_state.data_loaded:
        return st.session_state.data
    
    try:
        file_path = 'data/IED _ esg_calculator data.xlsx'
        
        # Charger toutes les feuilles directement avec leurs noms standardis√©s
        df_metiers = pd.read_excel(file_path, sheet_name='metier')
        df_salaire = pd.read_excel(file_path, sheet_name='salaire')
        df_competences = pd.read_excel(file_path, sheet_name='competences_cles')
        df_formations = pd.read_excel(file_path, sheet_name='formations_IED')
        df_tendances = pd.read_excel(file_path, sheet_name='tendances_marche')
        
        logger.debug(f"Colonnes disponibles dans la feuille m√©tier: {df_metiers.columns.tolist()}")
        
        # Stocker les donn√©es dans l'√©tat de la session
        st.session_state.data = {
            'salaire': df_salaire,
            'competences': df_competences,
            'metiers': df_metiers,
            'formations': df_formations,
            'tendances': df_tendances
        }
        st.session_state.data_loaded = True
        logger.info("Toutes les donn√©es ont √©t√© charg√©es avec succ√®s.")
        return st.session_state.data
    except Exception as e:
        logger.error(f"Erreur critique lors du chargement des donn√©es: {str(e)}")
        st.error(f"Erreur lors du chargement des donn√©es: {str(e)}")
        return {
            'salaire': pd.DataFrame(),
            'competences': pd.DataFrame(),
            'metiers': pd.DataFrame(),
            'formations': pd.DataFrame(),
            'tendances': pd.DataFrame()
        }

def get_all_tags():
    """R√©cup√®re tous les tags disponibles depuis la feuille m√©tier."""
    data = load_data()
    df_metiers = data.get('metiers', pd.DataFrame())
    
    # V√©rifier si le DataFrame est vide
    if df_metiers.empty:
        logger.warning("La feuille m√©tier est vide ou n'existe pas")
        # En cas d'√©chec, fournir une liste par d√©faut pour le MVP
        return ["Finance durable", "ESG", "Data/Analytics", "Reporting", "Conseil", "Investissement", 
                "D√©veloppement durable", "RSE", "Audit", "Conformit√©", "Risk Management"]
    
    # V√©rifier si la colonne Tags existe
    if 'Tags' not in df_metiers.columns:
        logger.warning("Colonne 'Tags' non trouv√©e dans la feuille m√©tier")
        return ["Finance durable", "ESG", "Data/Analytics", "Reporting", "Conseil", "Investissement", 
                "D√©veloppement durable", "RSE", "Audit", "Conformit√©", "Risk Management"]
    
    # Extraire et d√©dupliquer tous les tags
    all_tags = []
    for tags_str in df_metiers['Tags'].dropna():
        # V√©rifier le type de donn√©es pour √©viter les erreurs
        if isinstance(tags_str, str):
            tags = [tag.strip() for tag in tags_str.split(',')]
            all_tags.extend(tags)
    
    # Si aucun tag n'a √©t√© trouv√©, utiliser des valeurs par d√©faut
    if not all_tags:
        logger.warning("Aucun tag trouv√© dans les donn√©es, utilisation de valeurs par d√©faut")
        return ["Finance durable", "ESG", "Data/Analytics", "Reporting", "Conseil", "Investissement", 
                "D√©veloppement durable", "RSE", "Audit", "Conformit√©", "Risk Management"]
    
    # Retourner la liste unique tri√©e
    return sorted(list(set(all_tags)))

def get_all_entreprises():
    """R√©cup√®re tous les types d'entreprises disponibles."""
    # Dans cette version MVP, nous fournissons une liste pr√©d√©finie
    return [
        "Grandes entreprises", 
        "PME/ETI", 
        "Startups", 
        "Secteur public", 
        "ONG/Associations",
        "Cabinet de conseil"
    ]

def filter_metiers_by_tags(selected_tags):
    """Filtre les m√©tiers selon les tags s√©lectionn√©s."""
    data = load_data()
    df_metiers = data.get('metiers', pd.DataFrame())
    df_salaire = data.get('salaire', pd.DataFrame())
    
    # Si les donn√©es m√©tier sont vides ou si aucun tag n'est s√©lectionn√©, utiliser les donn√©es salaire comme fallback
    if df_metiers.empty or not selected_tags:
        if df_salaire.empty:
            # Aucune donn√©e disponible
            return []
        else:
            # Utiliser les donn√©es de salaire pour cr√©er une liste de m√©tiers avec minimum d'information
            logger.info("Utilisation des donn√©es de salaire comme fallback pour les m√©tiers")
            # Prendre jusqu'√† 5 m√©tiers de la table salaire
            fallback_metiers = []
            for i, (_, row) in enumerate(df_salaire.iterrows()):
                if i >= 5:  # Limiter √† 5 m√©tiers pour le fallback
                    break
                    
                metier_info = {
                    'Metier': row['M√©tier'],
                    'Secteur': row['Secteur'] if 'Secteur' in row else 'Non sp√©cifi√©',
                    'Description': row.get('Description', 'Information non disponible'),
                    'Tags': [],
                    'match_score': 1  # Score arbitraire
                }
                fallback_metiers.append(metier_info)
            return fallback_metiers
    
    # Maintenant nous savons que la colonne Tags existe dans le fichier reformat√©
    tag_column = 'Tags'
    
    # Filtrer les m√©tiers qui contiennent au moins un des tags s√©lectionn√©s
    matching_metiers = []
    
    for _, row in df_metiers.iterrows():
        if pd.isna(row[tag_column]):
            continue
            
        # V√©rifier que c'est bien une cha√Æne de caract√®res
        if not isinstance(row[tag_column], str):
            continue
            
        metier_tags = [tag.strip() for tag in row[tag_column].split(',')]
        
        # V√©rifier si au moins un tag s√©lectionn√© est pr√©sent
        if any(tag in metier_tags for tag in selected_tags):
            # Calculer un score de correspondance (nombre de tags correspondants)
            match_score = sum(1 for tag in selected_tags if tag in metier_tags)
            
            # R√©cup√©rer les informations du m√©tier
            # Chercher le secteur dans la table des salaires si disponible
            secteur = 'Non sp√©cifi√©'
            if not df_salaire.empty:
                salaire_row = df_salaire[df_salaire['M√©tier'] == row['M√©tier']]
                if not salaire_row.empty and 'Secteur' in salaire_row.columns:
                    secteur = salaire_row['Secteur'].iloc[0]
            
            matching_metiers.append({
                'Metier': row['M√©tier'],
                'Secteur': secteur,  # Utiliser le secteur trouv√© dans la table des salaires
                'Description': row.get('Description', 'Information non disponible'),
                'Tags': metier_tags,
                'match_score': match_score
            })
    
    # Si aucun m√©tier ne correspond, utiliser quelques m√©tiers par d√©faut de la table salaire
    if not matching_metiers and not df_salaire.empty:
        logger.info("Aucun m√©tier correspondant aux tags, utilisation de donn√©es de fallback")
        # Prendre jusqu'√† 3 m√©tiers de la table salaire
        for i, (_, row) in enumerate(df_salaire.iterrows()):
            if i >= 3:  # Limiter √† 3 m√©tiers pour le fallback
                break
                
            metier_info = {
                'Metier': row['M√©tier'],
                'Secteur': row['Secteur'] if 'Secteur' in row else 'Non sp√©cifi√©',
                'Description': row.get('Description', f"M√©tier en rapport avec les th√©matiques: {', '.join(selected_tags)}"),
                'Tags': selected_tags,  # Associer les tags s√©lectionn√©s
                'match_score': 1  # Score arbitraire
            }
            matching_metiers.append(metier_info)
    
    # Trier par score de correspondance d√©croissant
    matching_metiers.sort(key=lambda x: x['match_score'], reverse=True)
    
    return matching_metiers

def get_metier_details(metier_nom):
    """R√©cup√®re toutes les informations pour un m√©tier donn√©."""
    data = load_data()
    
    # R√©cup√©rer les informations de base du m√©tier
    df_metiers = data.get('metiers', pd.DataFrame())
    metier_info = df_metiers[df_metiers['M√©tier'] == metier_nom].to_dict('records')
    
    if not metier_info:
        logger.warning(f"Aucune information de base trouv√©e pour le m√©tier: {metier_nom}")
        # Cr√©er une entr√©e minimale pour √©viter de retourner None
        metier_data = {'M√©tier': metier_nom}
    else:
        metier_data = metier_info[0]
    
    # Ajouter les donn√©es salariales
    df_salaire = data.get('salaire', pd.DataFrame())
    salaire_info = df_salaire[df_salaire['M√©tier'] == metier_nom]
    
    if not salaire_info.empty:
        logger.debug(f"Donn√©es salariales trouv√©es pour {metier_nom}")
        # R√©cup√©rer la description du m√©tier √† partir de la feuille salaire
        if 'Description' in salaire_info.columns and not metier_data.get('Description'):
            desc = salaire_info['Description'].iloc[0]
            if pd.notna(desc) and desc:
                metier_data['Description'] = desc
        
        metier_data['salaire'] = salaire_info.to_dict('records')
    else:
        logger.warning(f"Aucune donn√©e salariale trouv√©e pour {metier_nom}")
    
    # Ajouter les comp√©tences
    df_competences = data.get('competences', pd.DataFrame())
    competences_filtered = get_competences_par_metier(df_competences, metier_nom)
    
    if not competences_filtered.empty:
        logger.debug(f"Comp√©tences trouv√©es pour {metier_nom}")
        metier_data['competences'] = competences_filtered.to_dict('records')
    else:
        logger.warning(f"Aucune comp√©tence trouv√©e pour {metier_nom}")
    
    # Ajouter les formations
    df_formations = data.get('formations', pd.DataFrame())
    formations_filtered = get_formations_par_metier(df_formations, metier_nom)
    
    if not formations_filtered.empty:
        logger.debug(f"Formations trouv√©es pour {metier_nom}")
        metier_data['formations'] = formations_filtered.to_dict('records')
    else:
        logger.warning(f"Aucune formation trouv√©e pour {metier_nom}")
    
    # Ajouter les tendances du march√©
    df_tendances = data.get('tendances', pd.DataFrame())
    # Logging des informations de d√©bogage
    logger.debug(f"Colonnes dans df_tendances: {df_tendances.columns.tolist()}")
    if 'M√©tier' in df_tendances.columns:
        logger.debug(f"Valeurs uniques de m√©tiers dans df_tendances: {df_tendances['M√©tier'].unique().tolist()}")
    else:
        logger.warning("Aucune colonne M√©tier dans les donn√©es de tendances")
    
    tendances_filtered = df_tendances[df_tendances['M√©tier'] == metier_nom]
    
    if not tendances_filtered.empty:
        logger.debug(f"Tendances trouv√©es pour {metier_nom}")
        metier_data['tendances'] = tendances_filtered.to_dict('records')
    else:
        logger.warning(f"Aucune tendance trouv√©e pour {metier_nom}")
    
    # Convertir les types de donn√©es √† des formes s√©rialisables si n√©cessaire
    for key, value in metier_data.items():
        if isinstance(value, pd.Series):
            metier_data[key] = value.to_dict()
        elif isinstance(value, np.ndarray):
            metier_data[key] = value.tolist()
        elif isinstance(value, np.integer):
            metier_data[key] = int(value)
        elif isinstance(value, np.floating):
            metier_data[key] = float(value)
    
    return metier_data

def get_competences_par_metier(df_competences, metier):
    """Retourne les comp√©tences pour un m√©tier donn√©."""
    if df_competences.empty or 'M√©tier' not in df_competences.columns:
        return pd.DataFrame()
    
    # Filtrer pour le m√©tier sp√©cifique
    df_filtered = df_competences[df_competences['M√©tier'] == metier]
    
    if df_filtered.empty:
        return pd.DataFrame()
    
    # Chercher toutes les colonnes potentielles de comp√©tences avec diff√©rentes orthographes possibles
    competence_patterns = ['Comp√©tence', 'Competence', 'comp√©tence', 'competence']
    
    # R√©cup√©rer toutes les colonnes qui pourraient contenir des comp√©tences
    competence_cols = []
    for pattern in competence_patterns:
        # Chercher les colonnes qui commencent par ce motif
        pattern_cols = [col for col in df_filtered.columns if str(col).startswith(pattern)]
        competence_cols.extend(pattern_cols)
    
    # Supprimer les doublons
    competence_cols = list(set(competence_cols))
    
    # Si aucune colonne de comp√©tences trouv√©e, essayer de trouver des colonnes num√©riques (Comp√©tence1, Comp√©tence2...)
    if not competence_cols:
        # Essayer de trouver des colonnes qui contiennent des chiffres et qui pourraient √™tre des comp√©tences
        competence_cols = [col for col in df_filtered.columns if any(p in str(col) for p in competence_patterns) or 
                          (any(c.isdigit() for c in str(col)) and len(str(col)) <= 15)]
    
    # Trier les colonnes pour avoir un ordre coh√©rent
    competence_cols.sort()
    
    logger.debug(f"Colonnes de comp√©tences trouv√©es: {competence_cols}")
    
    if competence_cols:
        # Cr√©er un nouveau DataFrame pour stocker les comp√©tences
        competences_list = []
        
        for _, row in df_filtered.iterrows():
            # Pour chaque colonne de comp√©tence, cr√©er une ligne
            for i, col in enumerate(competence_cols, 1):
                if pd.notna(row[col]) and row[col]:
                    competence_entry = {
                        'Comp√©tence': row[col],
                        'Importance': 6-min(i, 5)  # Importance d√©croissante bas√©e sur l'ordre (max 5)
                    }
                    competences_list.append(competence_entry)
        
        # Cr√©er un DataFrame √† partir de la liste
        if competences_list:
            return pd.DataFrame(competences_list).sort_values(by='Importance', ascending=False)
    
    # Si aucun format ne correspond, retourner un DataFrame vide
    return pd.DataFrame(columns=['Comp√©tence', 'Importance'])

def get_formations_par_metier(df_formations, metier):
    """Retourne les formations recommand√©es pour un m√©tier donn√©."""
    if df_formations.empty or 'M√©tier' not in df_formations.columns:
        return pd.DataFrame()
    
    # Filtrer pour le m√©tier sp√©cifique
    df_filtered = df_formations[df_formations['M√©tier'] == metier]
    
    if df_filtered.empty:
        return pd.DataFrame()
    
    # Cr√©er une copie explicite du DataFrame pour √©viter les SettingWithCopyWarning
    df_result = df_filtered.copy()
    
    # Ajouter une colonne Formation si elle n'existe pas d√©j√†
    if 'Formation' not in df_result.columns:
        # Utiliser Programme_Principal comme Formation si disponible
        if 'Programme_Principal' in df_result.columns:
            df_result['Formation'] = df_result['Programme_Principal']
    
    # Ajouter d'autres colonnes n√©cessaires pour l'affichage
    if 'Description' not in df_result.columns and 'Modules_Cl√©s' in df_result.columns:
        df_result['Description'] = df_result['Modules_Cl√©s']
    
    if 'Dur√©e' not in df_result.columns and 'Dur√©e_Formation' in df_result.columns:
        df_result['Dur√©e'] = df_result['Dur√©e_Formation']
        
    if 'Niveau' not in df_result.columns and 'Pr√©requis' in df_result.columns:
        df_result['Niveau'] = df_result['Pr√©requis']
    
    return df_result

# ----- VISUALISATIONS -----
def create_salary_chart(df_filtered, small_version=False):
    """Cr√©e un graphique d'√©volution salariale.
    
    Args:
        df_filtered: DataFrame des donn√©es filtr√©es
        small_version: Si True, cr√©e une version plus petite pour l'aper√ßu
    """
    colors = st.session_state.colors
    
    # V√©rifier et normaliser les colonnes obligatoires (avec ou sans accent)
    column_mapping = {
        'Exp√©rience': ['Exp√©rience', 'Experience'],
        'Salaire_Min': ['Salaire_Min', 'Salaire_min'],
        'Salaire_Max': ['Salaire_Max', 'Salaire_max'],
        'Salaire_Moyen': ['Salaire_Moyen', 'Salaire_moyen']
    }
    
    # Normaliser les colonnes du DataFrame
    for expected_col, possible_cols in column_mapping.items():
        for actual_col in possible_cols:
            if actual_col in df_filtered.columns and expected_col != actual_col:
                df_filtered.rename(columns={actual_col: expected_col}, inplace=True)
    
    # V√©rifier les colonnes apr√®s normalisation
    required_columns = ['Exp√©rience', 'Salaire_Min', 'Salaire_Max', 'Salaire_Moyen']
    missing_columns = [col for col in required_columns if col not in df_filtered.columns]
    
    if missing_columns:
        # Colonnes manquantes - cr√©er un graphique simple avec message d'erreur
        fig, ax = plt.subplots(figsize=(5, 3) if not small_version else (3.5, 2.5))
        ax.text(0.5, 0.5, f"Donn√©es salariales incompl√®tes\nColonnes manquantes: {', '.join(missing_columns)}", 
                ha='center', va='center', transform=ax.transAxes, fontsize=12)
        ax.set_axis_off()
        return fig
    
    # Choisir la taille en fonction du contexte
    if small_version:
        # Version compact pour l'aper√ßu
        fig, ax = plt.subplots(figsize=(4.5, 3))
    else:
        # Version normale pour les r√©sultats d√©taill√©s - plus large et plus haute
        fig, ax = plt.subplots(figsize=(9, 5))
    
    # Cr√©er des donn√©es pour le graphique
    experience = df_filtered['Exp√©rience'].tolist()
    min_salary = df_filtered['Salaire_Min'].tolist()
    max_salary = df_filtered['Salaire_Max'].tolist()
    avg_salary = df_filtered['Salaire_Moyen'].tolist()
    
    # Tracer les lignes et l'aire entre min et max
    x = range(len(experience))
    ax.plot(x, avg_salary, marker='o', linestyle='-', color=colors['primary'], linewidth=2, label='Salaire moyen')
    ax.fill_between(x, min_salary, max_salary, alpha=0.2, color=colors['primary'], label='Fourchette salariale')
    
    # Personnaliser le graphique
    ax.set_ylabel('Salaire annuel brut (‚Ç¨)', fontsize=11)
    ax.set_xlabel('Exp√©rience', fontsize=11)
    ax.set_xticks(x)
    ax.set_xticklabels(experience, fontsize=10)
    ax.grid(True, linestyle='--', alpha=0.7)
    
    # Ajuster la taille de la l√©gende
    if small_version:
        ax.legend(fontsize=9, loc='upper left')
    else:
        ax.legend(fontsize=10, loc='upper left')
    
    # Ajouter les valeurs (agrandies)
    for i, avg_val in enumerate(avg_salary):
        font_size = 9 if small_version else 10
        y_offset = 10 if small_version else 12
        ax.annotate(f"{avg_val}‚Ç¨", (i, avg_val), textcoords="offset points", 
                    xytext=(0, y_offset), ha='center', fontweight='bold', fontsize=font_size)
    
    # Ajouter plus d'espace autour du graphique
    plt.tight_layout(pad=1.5)
    return fig

# ----- COMPOSANTS D'INTERFACE -----
def display_header():
    """Affiche l'en-t√™te avec le logo."""
    col1, col2 = st.columns([1, 5])
    
    with col1:
        # Afficher le logo IED
        st.image("assets/logo_ied_low.png", width=150)
    
    with col2:
        st.markdown("<h1>Calculateur de Carri√®re ESG</h1>", unsafe_allow_html=True)

def display_contact_form():
    """Affiche un formulaire de contact pour collecte des informations."""
    st.markdown("### Pour acc√©der √† l'analyse d√©taill√©e")
    st.markdown("Recevez gratuitement votre analyse personnalis√©e et des informations sur nos formations.")
    
    with st.form(key="contact_form"):
        col1, col2 = st.columns(2)
        with col1:
            prenom = st.text_input("Pr√©nom*", value=st.session_state.user_data.get('prenom', ''))
            email = st.text_input("Email professionnel*", value=st.session_state.user_data.get('email', ''), 
                                placeholder="nom@entreprise.com")
        with col2:
            nom = st.text_input("Nom*", value=st.session_state.user_data.get('nom', ''))
            telephone = st.text_input("T√©l√©phone*", value=st.session_state.user_data.get('telephone', ''), 
                                     placeholder="06XXXXXXXX")
        
        opt_in = st.checkbox("J'accepte de recevoir des informations de l'Institut d'√âconomie Durable", 
                            value=st.session_state.user_data.get('opt_in', True))
        
        st.markdown("*Champs obligatoires")
        
        submit = st.form_submit_button("Recevoir mon analyse d√©taill√©e", use_container_width=True)
        
        if submit:
            errors = []
            
            # Validation basique
            if not prenom:
                errors.append("Veuillez entrer votre pr√©nom.")
            if not nom:
                errors.append("Veuillez entrer votre nom.")
            if not email or "@" not in email or "." not in email:
                errors.append("Veuillez entrer une adresse email valide.")
            if not telephone or len(''.join(c for c in telephone if c.isdigit())) < 10:
                errors.append("Veuillez entrer un num√©ro de t√©l√©phone valide (minimum 10 chiffres).")
            if not opt_in:
                errors.append("Veuillez accepter de recevoir des informations de l'IED pour continuer.")
            
            if errors:
                for error in errors:
                    st.error(error)
                return False
            
            # Enregistrer les coordonn√©es
            st.session_state.user_data.update({
                'prenom': prenom,
                'nom': nom,
                'email': email,
                'telephone': telephone,
                'opt_in': opt_in
            })
            
            # Envoyer les donn√©es √† Hubspot
            try:
                send_data_to_hubspot(st.session_state.user_data)
                # Marquer comme soumis pour √©viter les doublons
                st.session_state.user_data['hubspot_submitted'] = True
                st.session_state.email_submitted = True
                
                # Message de succ√®s et redirection
                st.success("Vos informations ont √©t√© enregistr√©es avec succ√®s.")
                
                # Changer de page (doit √™tre fait apr√®s le context du formulaire)
                st.session_state.scroll_to_top = True  # Activer le d√©filement vers le haut
                st.rerun()
                return True
            except ApiException as e:
                # Traitement sp√©cifique des erreurs d'API Hubspot
                if "email provided is invalid" in str(e).lower():
                    st.error("L'adresse email fournie n'est pas valide. Veuillez entrer une adresse email professionnelle correcte.")
                elif "rate limit" in str(e).lower():
                    st.error("Trop de requ√™tes en cours. Veuillez r√©essayer dans quelques instants.")
                else:
                    st.error(f"Erreur de validation des donn√©es: {str(e)}")
                logger.error(f"Erreur Hubspot API: {str(e)}")
                return False
            except Exception as e:
                # Gestion des autres types d'erreurs
                st.error("Une erreur est survenue lors de l'enregistrement de vos donn√©es. Veuillez v√©rifier vos informations.")
                logger.error(f"Erreur Hubspot g√©n√©rale: {str(e)}")
                return False
    
    return False

# Fonctions de s√©lection simplifi√©es - utilisons d√©sormais directement les composants natifs

# ----- PAGES DE L'APPLICATION -----
def page_accueil():
    """Affiche la page d'accueil avec entr√©e imm√©diate dans l'exp√©rience."""
    display_header()
    
    # Introduction avec mise en valeur
    st.markdown("""
    <div class='highlight-box'>
    <h2 style='text-align: center; margin-bottom: 20px;'>D√©couvrez les m√©tiers ESG qui correspondent √† vos int√©r√™ts</h2>
    <p style='text-align: center; font-size: 1.2em;'>Trouvez votre voie professionnelle dans l'√©conomie durable en quelques clics</p>
    <div style='font-size: 0.75em; color: #888; text-align: center; margin-top: 15px; border-top: 1px solid #eee; padding-top: 8px;'>
        <p style='margin: 0;'>Sources et donn√©es: Lefebvre Dalloz, Universit√© Paris-Dauphine, ISE, Michael Page, Fab Groupe, Makesense, ESG Finance, ESG Act, Glassdoor, Data.gouv</p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Chiffres cl√©s en colonnes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class='feature-card'>
        <h3 style='text-align: center'>üöÄ +20%</h3>
        <p style='text-align: center'>Croissance annuelle des m√©tiers ESG</p>
        </div>
        """, unsafe_allow_html=True)
        
    with col2:
        st.markdown("""
        <div class='feature-card'>
        <h3 style='text-align: center'>üíº +300</h3>
        <p style='text-align: center'>M√©tiers en d√©veloppement</p>
        </div>
        """, unsafe_allow_html=True)
        
    with col3:
        st.markdown("""
        <div class='feature-card'>
        <h3 style='text-align: center'>üí∞ 35-120k‚Ç¨</h3>
        <p style='text-align: center'>Fourchette salariale</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Bouton d'action pour commencer
    st.markdown("<div style='padding: 20px;'></div>", unsafe_allow_html=True)
    
    if st.button("Commencer", use_container_width=True, type="primary"):
        change_page("interests")
    

def page_interests():
    """Affiche la page de s√©lection des int√©r√™ts."""
    display_header()
    
    # Titre principal avec style am√©lior√©
    st.markdown("""
    <div style='padding: 20px; background-color: white; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 2px 5px rgba(0,0,0,0.05);'>
        <h2 style='text-align: center; color: #0356A5;'>D√©couvrez les m√©tiers ESG qui correspondent √† votre profil</h2>
        <p style='text-align: center; font-size: 1.1em;'>Quelques clics pour trouver votre voie dans l'√©conomie durable</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Charger les donn√©es
    tags = get_all_tags()
    entreprises = get_all_entreprises()
    
    # R√©cup√©rer et initialiser les s√©lections existantes dans la session state
    if 'selected_tags' not in st.session_state:
        st.session_state.selected_tags = []
    
    # 1. Section objectif professionnel
    st.markdown("""
    <div style='padding: 15px 20px; background-color: #e6f7f2; border-left: 4px solid #00916E; border-radius: 5px; margin-bottom: 25px;'>
        <h3 style='color: #00916E;'>Votre objectif professionnel</h3>
        <p>Quelle est votre situation actuelle ?</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Options d'objectif professionnel avec radio buttons
    objectifs = [
        "Trouver une alternance ou un stage",
        "D√©buter ma carri√®re (CDI, CDD, Freelance)", 
        "√âvoluer dans mon secteur actuel", 
        "Me reconvertir compl√®tement",
        "Explorer de nouvelles opportunit√©s",
        "Autre"
    ]
    
    # Stocker l'objectif s√©lectionn√© temporairement (pas sauvegard√© dans user_data)
    selected_objectif = st.radio(
        label="S√©lectionnez votre objectif",
        options=objectifs,
        horizontal=False,
        label_visibility="collapsed"
    )
    
    # S√©parateur visuel entre les sections
    st.markdown("<hr style='margin: 30px 0; border: none; height: 1px; background-color: #ddd;'>", unsafe_allow_html=True)
    
    # 2. Section domaines d'int√©r√™t - pr√©sentation simple et efficace
    st.markdown("""
    <div style='padding: 15px 20px; background-color: #f0f7ff; border-left: 4px solid #0356A5; border-radius: 5px; margin-bottom: 15px;'>
        <h3 style='color: #0356A5;'>Vos domaines d'int√©r√™t</h3>
        <p>S√©lectionnez les domaines qui vous int√©ressent :</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Cr√©er des colonnes pour organiser les checkboxes
    col1, col2, col3 = st.columns(3)
    
    # Distribuer les tags de mani√®re √©quilibr√©e entre les colonnes
    tags_per_column = (len(tags) + 2) // 3
    
    # Afficher les checkboxes dans chaque colonne
    for i, col in enumerate([col1, col2, col3]):
        start_idx = i * tags_per_column
        end_idx = min(start_idx + tags_per_column, len(tags))
        
        with col:
            for tag in tags[start_idx:end_idx]:
                # V√©rifier si ce tag est d√©j√† s√©lectionn√©
                is_selected = tag in st.session_state.selected_tags
                
                # Checkbox avec style am√©lior√©
                if st.checkbox(tag, value=is_selected, key=f"tag_{tag}"):
                    if tag not in st.session_state.selected_tags:
                        st.session_state.selected_tags.append(tag)
                else:
                    if tag in st.session_state.selected_tags:
                        st.session_state.selected_tags.remove(tag)
    
    # Afficher un r√©sum√© des tags s√©lectionn√©s pour un feedback clair
    if st.session_state.selected_tags:
        st.markdown(f"""
        <div style='padding: 12px 18px; background-color: #eef7ff; border-radius: 8px; margin: 15px 0; border: 1px solid #0356A5;'>
            <p><strong>üîç Domaines s√©lectionn√©s ({len(st.session_state.selected_tags)}) :</strong> {', '.join(st.session_state.selected_tags)}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # S√©parateur visuel entre les sections
    st.markdown("<hr style='margin: 25px 0; border: none; height: 1px; background-color: #ddd;'>", unsafe_allow_html=True)
    
    # 3. Section types d'entreprises - avec multiselect au lieu de toggles
    st.markdown("""
    <div style='padding: 15px 20px; background-color: #fffaf0; border-left: 4px solid #FFE548; border-radius: 5px; margin-bottom: 15px;'>
        <h3 style='color: #333;'>Types d'entreprises</h3>
        <p>S√©lectionnez les types d'entreprises qui vous int√©ressent :</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Utiliser un multiselect pour une meilleure exp√©rience utilisateur
    selected_entreprises = st.multiselect(
        label="Choisissez un ou plusieurs types d'entreprises",
        options=entreprises,
        default=[],
        label_visibility="collapsed"
    )
    
    # Espacement avant les boutons d'action
    st.markdown("<div style='padding: 20px;'></div>", unsafe_allow_html=True)
    
    # Bouton d'action principal avec style am√©lior√©
    st.markdown("""
    <div style='background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.05); text-align: center;'>
        <p style='font-weight: bold; font-size: 1.1em;'>Pr√™t √† d√©couvrir les m√©tiers qui correspondent √† votre profil ?</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Boutons de navigation am√©lior√©s
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if st.button("‚Üê Retour", use_container_width=True):
            change_page("accueil")
    
    with col2:
        if st.button("D√©couvrir mes m√©tiers ‚Üí", use_container_width=True, type="primary"):
            if st.session_state.selected_tags:
                # Sauvegarder les tags s√©lectionn√©s dans les donn√©es utilisateur
                st.session_state.user_data['tags'] = st.session_state.selected_tags
                
                # Ex√©cuter la recherche des m√©tiers correspondants
                metiers_matches = filter_metiers_by_tags(st.session_state.selected_tags)
                st.session_state.user_data['metiers_matches'] = metiers_matches
                
                # Aller √† la page de r√©sultats
                change_page("resultats")
            else:
                st.error("Veuillez s√©lectionner au moins un domaine d'int√©r√™t pour continuer.")

def page_resultats():
    """Affiche la page des r√©sultats avec les m√©tiers correspondants."""
    display_header()
    
    # R√©cup√©rer les m√©tiers correspondants aux tags s√©lectionn√©s
    if not st.session_state.user_data.get('metiers_matches'):
        # Si pas de r√©sultats, ex√©cuter la recherche
        selected_tags = st.session_state.selected_tags
        if not selected_tags:
            st.warning("Veuillez d'abord s√©lectionner vos domaines d'int√©r√™t.")
            change_page("interests")
            return
            
        metiers_matches = filter_metiers_by_tags(selected_tags)
        st.session_state.user_data['metiers_matches'] = metiers_matches
    else:
        # Utiliser les r√©sultats existants
        metiers_matches = st.session_state.user_data.get('metiers_matches')
    
    # Afficher les r√©sultats
    if not metiers_matches:
        st.warning("Aucun m√©tier ne correspond √† vos crit√®res de recherche.")
        if st.button("Modifier mes crit√®res"):
            change_page("interests")
        return
    
    # En-t√™te de la page
    st.markdown("""
    <div class='highlight-box'>
    <h2 style='text-align: center;'>Voici les m√©tiers ESG qui vous correspondent</h2>
    </div>
    """, unsafe_allow_html=True)
    
    # Afficher le nombre de m√©tiers trouv√©s
    st.markdown(f"### Top 3 des m√©tiers ESG bas√©s sur vos int√©r√™ts")
    st.markdown(f"**Vos domaines s√©lectionn√©s :** *{', '.join(st.session_state.selected_tags)}*")
    
    # Afficher les 3 premiers m√©tiers
    top_metiers = metiers_matches[:3]
    
    # Utiliser des colonnes pour une meilleure pr√©sentation sur grand √©cran
    cols = st.columns(min(len(top_metiers), 3))
    
    for i, metier in enumerate(top_metiers):
        metier_nom = metier['Metier']
        secteur = metier.get('Secteur', 'Non sp√©cifi√©')
        description = metier.get('Description', 'Information non disponible')
        
        # Enrichir les donn√©es si n√©cessaire
        if secteur == 'Non sp√©cifi√©':
            # Tenter de trouver le secteur dans les donn√©es de salaire
            data = load_data()
            df_salaire = data.get('salaire', pd.DataFrame())
            if not df_salaire.empty:
                secteur_info = df_salaire[df_salaire['M√©tier'] == metier_nom]
                if not secteur_info.empty and 'Secteur' in secteur_info.columns:
                    secteur = secteur_info['Secteur'].iloc[0]
        
        # Faire un log pour le d√©bogage
        logger.debug(f"Affichage du m√©tier: {metier_nom}, Secteur: {secteur}")
        
        with cols[i]:
            # Utiliser une carte pour chaque m√©tier sans description
            st.markdown(f"""
            <div class='metier-card'>
                <h3>{metier_nom}</h3>
                <p><strong>Secteur :</strong> {secteur}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Bouton pour voir les d√©tails du m√©tier (solution native Streamlit)
            if st.button(f"Voir d√©tails", key=f"detail_{i}"):
                st.session_state.user_data['metier_selectionne'] = metier_nom
                # Aller directement √† la page d√©taill√©e avec paywall int√©gr√©
                change_page("metier_detail")
    
    # Formulaire de contact int√©gr√©
    st.markdown("---")
    st.markdown("### Acc√©dez √† l'analyse d√©taill√©e de ces m√©tiers")
    
    if not st.session_state.email_submitted:
        display_contact_form()
    else:
        if st.button("Voir l'analyse d√©taill√©e", type="primary", use_container_width=True):
            # Aller directement √† la page d√©taill√©e du m√©tier s√©lectionn√©
            if st.session_state.user_data.get('metier_selectionne'):
                change_page("metier_detail")
            else:
                # S√©lectionner le premier m√©tier par d√©faut
                st.session_state.user_data['metier_selectionne'] = top_metiers[0]['Metier']
                change_page("metier_detail")
    
    # Option pour modifier les int√©r√™ts
    if st.button("Modifier mes centres d'int√©r√™t"):
        change_page("interests")

def page_contact():
    """Page d√©di√©e au formulaire de contact - redirection vers le paywall int√©gr√©."""
    # Maintenant que le formulaire est int√©gr√© directement dans la page d√©taill√©e,
    # cette page sert uniquement de redirection
    
    # R√©cup√©rer le m√©tier s√©lectionn√©
    metier_selectionne = st.session_state.user_data.get('metier_selectionne', '')
    
    if not metier_selectionne:
        st.warning("Aucun m√©tier s√©lectionn√©.")
        change_page("resultats")
        return
    
    # Rediriger vers la page d√©taill√©e avec paywall int√©gr√©
    change_page("metier_detail")

def page_metier_detail():
    """Affiche la page d√©taill√©e d'un m√©tier avec paywall visuel."""
    display_header()
    
    # R√©cup√©rer le m√©tier s√©lectionn√©
    metier_nom = st.session_state.user_data.get('metier_selectionne', '')
    
    if not metier_nom:
        st.warning("Aucun m√©tier s√©lectionn√©.")
        change_page("resultats")
        return
    
    # R√©cup√©rer les d√©tails du m√©tier
    metier_details = get_metier_details(metier_nom)
    
    if not metier_details:
        st.warning(f"Donn√©es non disponibles pour le m√©tier : {metier_nom}")
        if st.button("Retour aux r√©sultats"):
            change_page("resultats")
        return
    
    # CSS minimal pour la mise en page
    st.markdown("""
    <style>
    /* Styles de base */
    .preview-section {
        margin-bottom: 40px;
    }
    
    .premium-box {
        background-color: white;
        border-radius: 10px;
        padding: 30px;
        margin-top: 10px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        border-left: 5px solid #0356A5;
    }
    
    .dark .premium-box {
        background-color: #1E1E1E;
    }
    
    .section-divider {
        width: 100%;
        height: 2px;
        background-color: #eee;
        margin: 35px 0;
    }
    
    .cta-title {
        font-size: 24px;
        font-weight: bold;
        color: #0356A5;
        margin-bottom: 15px;
        text-align: center;
    }
    
    .cta-message {
        background-color: #f0f7ff;
        border-left: 4px solid #0356A5;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
        text-align: center;
    }
    
    .dark .cta-message {
        background-color: rgba(3, 86, 165, 0.2);
    }
    
    .small-chart {
        max-width: 90%;
        margin: 0 auto;
    }
    
    .info-card {
        background-color: white;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        margin-bottom: 15px;
        border-left: 3px solid #0356A5;
    }
    
    .dark .info-card {
        background-color: rgba(50, 50, 60, 0.8);
    }
    </style>
    """, unsafe_allow_html=True)
    
    # ========== PARTIE 1: CONTENU VISIBLE (APER√áU) ==========
    
    # Titre et secteur du m√©tier
    st.markdown(f"# {metier_nom}")
    if 'Secteur' in metier_details:
        st.caption(f"Secteur: **{metier_details['Secteur']}**")
    
    # Conteneur pour la partie visible
    st.markdown("<div class='preview-section'>", unsafe_allow_html=True)
    
    # Description courte du m√©tier
    st.markdown("## üìã Description du m√©tier")
    if 'Description' in metier_details and metier_details['Description']:
        st.markdown(metier_details['Description'])
    else:
        st.info(f"Aucune description disponible pour le m√©tier de {metier_nom}.")
    
    # Section Aper√ßu des salaires avec informations suppl√©mentaires
    st.markdown("## üí∞ Aper√ßu des salaires et opportunit√©s")
    
    # Cr√©er une mise en page √† deux colonnes pour le graphique et les informations
    col_chart, col_info = st.columns([3, 2])
    
    with col_chart:
        if 'salaire' in metier_details and metier_details['salaire']:
            try:
                # Convertir en DataFrame
                salaire_data = pd.DataFrame(metier_details['salaire'])
                
                # Normaliser les colonnes
                column_mapping = {
                    'Exp√©rience': ['Exp√©rience', 'Experience'],
                    'Salaire_Min': ['Salaire_Min', 'Salaire_min'],
                    'Salaire_Max': ['Salaire_Max', 'Salaire_max'],
                    'Salaire_Moyen': ['Salaire_Moyen', 'Salaire_moyen']
                }
                
                for expected_col, possible_cols in column_mapping.items():
                    for actual_col in possible_cols:
                        if actual_col in salaire_data.columns and expected_col != actual_col:
                            salaire_data.rename(columns={actual_col: expected_col}, inplace=True)
                
                # V√©rifier les colonnes n√©cessaires
                salary_columns = ['Exp√©rience', 'Salaire_Min', 'Salaire_Max', 'Salaire_Moyen']
                has_salary_columns = all(col in salaire_data.columns for col in salary_columns)
                
                if has_salary_columns:
                    # Cr√©er un graphique de salaire normal (pas compact)
                    fig_salary = create_salary_chart(salaire_data, small_version=False)
                    st.pyplot(fig_salary)
                else:
                    st.info("Donn√©es salariales incompl√®tes.")
            except Exception as e:
                st.info("Aper√ßu des informations salariales disponible dans l'analyse compl√®te.")
        else:
            st.info("Informations salariales disponibles dans l'analyse compl√®te.")
    
    # Colonne d'informations suppl√©mentaires sur le m√©tier
    with col_info:
        st.markdown("### Points cl√©s")
        
        # Extraire des informations des donn√©es disponibles pour les points cl√©s
        key_points = []
        
        # V√©rifier si des tendances sont disponibles
        if 'tendances' in metier_details and metier_details['tendances']:
            tendances = metier_details['tendances'][0]
            
            # Remplacer l'√©volution du poste par une info simplifi√©e
            if 'Croissance_Annuelle' in tendances and pd.notna(tendances['Croissance_Annuelle']):
                tendance_str = str(tendances['Croissance_Annuelle']).lower()
                emoji = "üöÄ" if "hausse" in tendance_str or "forte" in tendance_str else "üìà" if "croissance" in tendance_str else "üìä"
                key_points.append(f"{emoji} **M√©tier en expansion** sur le march√©")
        
        # Ajouter des informations sur le salaire si disponibles
        if 'salaire' in metier_details and metier_details['salaire']:
            salaire_data = pd.DataFrame(metier_details['salaire'])
            if 'Salaire_Moyen' in salaire_data.columns and not salaire_data.empty:
                # Obtenir le salaire moyen senior (derni√®re ligne g√©n√©ralement)
                try:
                    top_salary = salaire_data['Salaire_Moyen'].iloc[-1]
                    key_points.append(f"üí∞ **Salaire potentiel**: Jusqu'√† {top_salary}‚Ç¨ brut/an en moyenne")
                except:
                    pass
        
        # Ajouter les comp√©tences principales si disponibles
        if 'competences' in metier_details and metier_details['competences']:
            competences_list = sorted(metier_details['competences'], key=lambda x: x['Importance'], reverse=True)
            if competences_list:
                # Prendre les 2 comp√©tences les plus importantes
                top_skills = [comp['Comp√©tence'] for comp in competences_list[:2]]
                key_points.append(f"üîë **Comp√©tences cl√©s**: {', '.join(top_skills)}")
        
        # Si aucune information n'a √©t√© trouv√©e, ajouter un message par d√©faut
        if not key_points:
            key_points = [
                "üìä **Secteur en croissance** dans l'√©conomie durable",
                "üå± **M√©tier d'avenir** avec impact environnemental",
                "üíº **Opportunit√©s** dans divers types d'organisations"
            ]
        
        # Afficher les points cl√©s
        for point in key_points:
            st.markdown(point)
        
        # Ajouter une incitation √† consulter les d√©tails
        st.markdown("---")
        st.markdown("*Acc√©dez √† l'analyse compl√®te pour plus de d√©tails sur ce m√©tier*", unsafe_allow_html=True)
    
    # Fin du conteneur de preview
    st.markdown("</div>", unsafe_allow_html=True)
    
    # S√©parateur visuel
    #st.markdown("<div class='section-divider'></div>", unsafe_allow_html=True)
    
    # ========== PARTIE 2: SECTION PREMIUM ==========
    
    # CONDITION: Selon que le formulaire a √©t√© soumis ou non
    if not st.session_state.email_submitted:
        # ===== SI FORMULAIRE NON SOUMIS: AFFICHER UNIQUEMENT LE FORMULAIRE =====
        st.markdown("<div class='premium-box'>", unsafe_allow_html=True)
        
        # Titre et message explicatif
        st.markdown("<div class='cta-title'>üîì D√©bloquez l'analyse d√©taill√©e du m√©tier</div>", unsafe_allow_html=True)
        st.markdown("<div class='cta-message'>Acc√©dez gratuitement √† toutes les informations d√©taill√©es sur ce m√©tier : comp√©tences cl√©s, formations recommand√©es et tendances du march√©.</div>", unsafe_allow_html=True)
        
        # Formulaire de contact
        with st.form(key="contact_form_paywall"):
            col1, col2 = st.columns(2)
            with col1:
                prenom = st.text_input("Pr√©nom*", value=st.session_state.user_data.get('prenom', ''),
                                     placeholder="Camille")
                email = st.text_input("Email professionnel*", value=st.session_state.user_data.get('email', ''), 
                                    placeholder="nom@entreprise.com")
            with col2:
                nom = st.text_input("Nom*", value=st.session_state.user_data.get('nom', ''),
                                  placeholder="Dupont")
                telephone = st.text_input("T√©l√©phone*", value=st.session_state.user_data.get('telephone', ''), 
                                        placeholder="06XXXXXXXX")
            
            opt_in = st.checkbox("J'accepte de recevoir des informations de l'Institut d'√âconomie Durable", 
                               value=st.session_state.user_data.get('opt_in', True))
            
            st.markdown("*Champs obligatoires")
            
            submit = st.form_submit_button("Acc√©der √† l'analyse compl√®te", use_container_width=True)
            
            if submit:
                errors = []
                
                # Validation basique
                if not prenom:
                    errors.append("Veuillez entrer votre pr√©nom.")
                if not nom:
                    errors.append("Veuillez entrer votre nom.")
                if not email or "@" not in email or "." not in email:
                    errors.append("Veuillez entrer une adresse email valide.")
                if not telephone or len(''.join(c for c in telephone if c.isdigit())) < 10:
                    errors.append("Veuillez entrer un num√©ro de t√©l√©phone valide (minimum 10 chiffres).")
                if not opt_in:
                    errors.append("Veuillez accepter de recevoir des informations de l'IED pour continuer.")
                
                if errors:
                    for error in errors:
                        st.error(error)
                else:
                    # Enregistrer les coordonn√©es
                    st.session_state.user_data.update({
                        'prenom': prenom,
                        'nom': nom,
                        'email': email,
                        'telephone': telephone,
                        'opt_in': opt_in
                    })
                    
                    # Envoyer les donn√©es √† Hubspot
                    try:
                        send_data_to_hubspot(st.session_state.user_data)
                        # Marquer comme soumis pour √©viter les doublons
                        st.session_state.user_data['hubspot_submitted'] = True
                        st.session_state.email_submitted = True
                        
                        # Message de succ√®s et rechargement
                        st.success("Vos informations ont √©t√© enregistr√©es avec succ√®s.")
                        st.session_state.scroll_to_top = True  # Activer le d√©filement vers le haut
                        st.rerun()
                    except Exception as e:
                        # Gestion des erreurs
                        st.error("Une erreur est survenue lors de l'enregistrement de vos donn√©es. Veuillez v√©rifier vos informations.")
                        logger.error(f"Erreur Hubspot: {str(e)}")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    else:
        # ===== SI FORMULAIRE SOUMIS: AFFICHER LE CONTENU PREMIUM =====
        
        # Titre de la section premium
        st.markdown("## üîç Analyse d√©taill√©e du m√©tier")
        
        # Comp√©tences cl√©s
        st.markdown("### üîë Comp√©tences cl√©s")
        if 'competences' in metier_details and metier_details['competences']:
            competences_cols = st.columns(2)
            competences_list = sorted(metier_details['competences'], key=lambda x: x['Importance'], reverse=True)
            
            for i, comp in enumerate(competences_list):
                col_index = i % 2
                with competences_cols[col_index]:
                    importance = comp['Importance']
                    emoji = "üî¥" if importance >= 4 else "üü†" if importance >= 2 else "üü°"
                    st.markdown(f"{emoji} **{comp['Comp√©tence']}**")
        else:
            st.info("Aucune information sur les comp√©tences n'est disponible pour ce m√©tier.")
        
        # Formations recommand√©es
        st.markdown("### üéì Formations recommand√©es")
        if 'formations' in metier_details and metier_details['formations']:
            st.markdown("Formations recommand√©es par l'Institut pour d√©velopper vos comp√©tences dans ce m√©tier :")
            for i, formation in enumerate(metier_details['formations']):
                formation_name = formation.get('Formation', f"Formation {i+1}")
                with st.expander(formation_name):
                    # Afficher les d√©tails de la formation avec une pr√©sentation am√©lior√©e
                    col1, col2 = st.columns([3, 2])
                    
                    with col1:
                        if 'Description' in formation and formation['Description']:
                            st.markdown(formation['Description'])
                        else:
                            st.markdown("*Description non disponible*")
                    
                    with col2:
                        # Cr√©er un bloc d'informations cl√©s avec badges color√©s
                        info_html = ""
                        
                        if 'Dur√©e' in formation and formation['Dur√©e']:
                            info_html += f"<div style='margin-bottom:10px;'><span style='background-color:{st.session_state.colors['primary']}; color:white; padding:3px 8px; border-radius:10px; font-size:0.8em;'>‚è±Ô∏è {formation['Dur√©e']}</span></div>"
                        
                        if 'Niveau' in formation and formation['Niveau']:
                            info_html += f"<div style='margin-bottom:10px;'><span style='background-color:{st.session_state.colors['green']}; color:white; padding:3px 8px; border-radius:10px; font-size:0.8em;'>üéØ Niveau {formation['Niveau']}</span></div>"
                        
                        if 'Prix' in formation and formation['Prix']:
                            info_html += f"<div style='margin-bottom:10px;'><span style='background-color:{st.session_state.colors['secondary']}; color:#333; padding:3px 8px; border-radius:10px; font-size:0.8em;'>üí∞ {formation['Prix']}‚Ç¨</span></div>"
                        
                        st.markdown(info_html, unsafe_allow_html=True)
                        
                        if 'Lien' in formation and formation['Lien']:
                            st.markdown(f"<a href='{formation['Lien']}' target='_blank' style='display:inline-block; margin-top:10px; background-color:{st.session_state.colors['primary']}; color:white; padding:5px 15px; border-radius:5px; text-decoration:none; font-size:0.9em;'>En savoir plus</a>", unsafe_allow_html=True)
        else:
            st.info("Aucune formation sp√©cifique n'est disponible pour ce m√©tier.")
        
        # Tendances du march√©
        st.markdown("### üìà Tendances du march√©")
        if 'tendances' in metier_details and metier_details['tendances']:
            tendances = metier_details['tendances'][0]
            
            # Affichage en colonnes pour une meilleure mise en page
            col1, col2 = st.columns([2, 3])
            
            with col1:
                # Croissance annuelle avec indicateur visuel
                if 'Croissance_Annuelle' in tendances:
                    tendance = tendances['Croissance_Annuelle']
                    if pd.notna(tendance):
                        # D√©terminer l'√©moji selon la tendance
                        tendance_str = str(tendance).lower()
                        tendance_emoji = "üöÄ" if "hausse" in tendance_str or "forte" in tendance_str or "+" in tendance_str else "üìà" if "croissance" in tendance_str or "positive" in tendance_str else "‚û°Ô∏è" if "stable" in tendance_str else "üìâ" if "baisse" in tendance_str or "d√©clin" in tendance_str or "-" in tendance_str else "üìä"
                        
                        # Cr√©er un style visuel pour la tendance
                        tendance_color = f"{st.session_state.colors['green']}" if "hausse" in tendance_str or "croissance" in tendance_str or "positive" in tendance_str or "+" in tendance_str else f"{st.session_state.colors['primary']}" if "stable" in tendance_str else "#e74c3c"
                        
                        st.markdown(f"""
                        <div class='info-card'>
                            <h4 style='margin-top: 0; color: {tendance_color};'>{tendance_emoji} Croissance annuelle</h4>
                            <p style='font-size: 1.1em;'>{tendance}</p>
                        </div>
                        """, unsafe_allow_html=True)
                
                # Ajouter demande march√© comme m√©trique suppl√©mentaire
                if 'Demande_March√©' in tendances:
                    demande = tendances['Demande_March√©']
                    if pd.notna(demande):
                        st.markdown(f"""
                        <div class='info-card'>
                            <h4 style='margin-top: 0;'>üîç Demande du march√©</h4>
                            <p style='font-size: 1.1em;'>{demande}</p>
                        </div>
                        """, unsafe_allow_html=True)
            
            with col2:
                # Tendance salariale et secteurs recruteurs dans un bloc
                tendance_salariale = ""
                if 'Salaire_Tendance' in tendances:
                    sal_tendance = tendances['Salaire_Tendance']
                    if pd.notna(sal_tendance):
                        tendance_salariale = f"<p><strong>üí∞ Tendance salariale:</strong> {sal_tendance}</p>"
                
                secteurs_recruteurs = ""
                if 'Secteurs_Recruteurs' in tendances:
                    secteurs = tendances['Secteurs_Recruteurs']
                    if pd.notna(secteurs):
                        secteurs_recruteurs = f"<p><strong>üè¢ Principaux secteurs recruteurs:</strong> {secteurs}</p>"
                
                # Afficher le bloc combin√© s'il contient des donn√©es
                if tendance_salariale or secteurs_recruteurs:
                    st.markdown(f"""
                    <div class='info-card'>
                        <h4 style='margin-top: 0;'>üîÆ Perspectives d'√©volution</h4>
                        {tendance_salariale}
                        {secteurs_recruteurs}
                    </div>
                    """, unsafe_allow_html=True)
        else:
            st.info("Aucune tendance de march√© disponible pour ce m√©tier.")
        
        # CTA finale
        st.markdown("### Vous souhaitez en savoir plus ?")
        st.markdown("""
        L'Institut d'√âconomie Durable propose des formations adapt√©es pour d√©velopper votre carri√®re ESG.
        Notre √©quipe vous contactera prochainement pour vous pr√©senter nos programmes.
        Visitez le site de l'IED pour plus d'informations : www.ied-paris.fr
        """)
    
    # ========== BOUTONS DE NAVIGATION (communs aux deux √©tats) ==========
    
    # S√©parateur visuel avant les boutons
    st.markdown("<div class='section-divider'></div>", unsafe_allow_html=True)
    
    # Boutons de navigation
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚Üê Retour aux r√©sultats", use_container_width=True):
            change_page("resultats")
    with col2:
        if st.button("Modifier mes int√©r√™ts ‚Üí", use_container_width=True):
            change_page("interests")

# ----- FONCTION PRINCIPALE -----
def main():
    """Fonction principale de l'application."""
    # Configurer l'application
    configure_app()
    
    # Initialiser l'√©tat de la session
    initialize_session_state()
    
    # Afficher la page correspondante √† l'√©tat actuel
    if st.session_state.page == "accueil":
        page_accueil()
    elif st.session_state.page == "interests":
        page_interests()
    elif st.session_state.page == "resultats":
        page_resultats()
    elif st.session_state.page == "contact":
        page_contact()
    elif st.session_state.page == "metier_detail":
        page_metier_detail()
    else:
        # Page par d√©faut
        page_accueil()

# ----- POINT D'ENTR√âE -----
if __name__ == "__main__":
    main()