import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import json
import io
import smtplib
import ssl
import csv
import tempfile
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
from reportlab.lib.units import inch, cm

# Configuration de la page
st.set_page_config(
    page_title="Calculateur de Carri√®re ESG - Institut d'√âconomie Durable",
    page_icon="üå±",
    layout="wide"
)

# D√©finition des couleurs
PRIMARY_COLOR = "#003366"  # Bleu fonc√©
SECONDARY_COLOR = "#FFE548"  # Jaune pour les boutons

# CSS personnalis√©
def load_custom_css():
    st.markdown("""
    <style>
    .main {
        background-color: #FFFFFF;
    }
    .stButton>button {
        background-color: #FFE548;
        color: #003366;
        font-weight: bold;
        border-radius: 5px;
        border: none;
        padding: 10px 20px;
        min-width: 200px;
    }
    .stButton>button:hover {
        background-color: #E5CE41;
        color: #003366;
    }
    .lead-capture-box {
        background-color: #f7f9fa;
        border-radius: 10px;
        padding: 20px;
        margin: 20px 0 30px 0;
        border-left: 4px solid #FFE548;
    }
    .form-submit-button {
        background-color: #FFE548 !important;
        color: #003366 !important;
        font-weight: bold !important;
        border-radius: 5px !important;
        border: none !important;
        padding: 12px 24px !important;
        min-width: 250px !important;
        text-align: center !important;
    }
    .progress-container {
        width: 100%;
        padding: 10px 0;
    }
    .progress-bar {
        height: 10px;
        background-color: #E0E0E0;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    .progress-bar-fill {
        height: 100%;
        background-color: #FFE548;
        border-radius: 5px;
    }
    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .logo-container {
        margin-right: 20px;
    }
    .title-container {
        flex-grow: 1;
    }
    </style>
    """, unsafe_allow_html=True)

# Fonctions de gestion des donn√©es
def load_data():
    """Charge les donn√©es des salaires ESG depuis un fichier CSV."""
    try:
        # Essayer de charger depuis le fichier CSV
        df = pd.read_csv('data/metiers_esg.csv')
        return df
    except (FileNotFoundError, pd.errors.EmptyDataError):
        # Si le fichier n'existe pas ou est vide, utiliser les donn√©es par d√©faut
        print("Fichier CSV non trouv√©, utilisation des donn√©es par d√©faut")
        data = {
            'M√©tier': [
                'Analyste ESG', 'Analyste ESG', 'Analyste ESG',
                'Responsable ESG', 'Responsable ESG', 'Responsable ESG'
            ],
            'Secteur': [
                'Finance', 'Finance', 'Finance',
                'Finance', 'Finance', 'Finance'
            ],
            'Exp√©rience': [
                '0-2 ans', '2-5 ans', '5-10 ans',
                '0-2 ans', '2-5 ans', '5-10 ans'
            ],
            'Salaire_Min': [
                35000, 42000, 50000,
                38000, 47000, 61000
            ],
            'Salaire_Max': [
                45000, 52000, 65000,
                47000, 61000, 75000
            ],
            'Salaire_Moyen': [
                40000, 47000, 57500,
                42500, 54000, 68000
            ],
            'Description': [
                "Analyse et int√©gration des crit√®res environnementaux, sociaux et de gouvernance dans l'√©valuation des entreprises.",
                "Analyse et int√©gration des crit√®res environnementaux, sociaux et de gouvernance dans l'√©valuation des entreprises.",
                "Analyse et int√©gration des crit√®res environnementaux, sociaux et de gouvernance dans l'√©valuation des entreprises.",
                "Mise en ≈ìuvre et supervision des strat√©gies ESG au sein des organisations financi√®res.",
                "Mise en ≈ìuvre et supervision des strat√©gies ESG au sein des organisations financi√®res.",
                "Mise en ≈ìuvre et supervision des strat√©gies ESG au sein des organisations financi√®res."
            ]
        }
        return pd.DataFrame(data)

def get_m√©tiers_par_secteur():
    """Retourne un dictionnaire des m√©tiers par secteur."""
    df = load_data()
    m√©tiers_par_secteur = {}
    
    for secteur in df['Secteur'].unique():
        m√©tiers_dans_secteur = df[df['Secteur'] == secteur]['M√©tier'].unique().tolist()
        m√©tiers_par_secteur[secteur] = m√©tiers_dans_secteur
    
    return m√©tiers_par_secteur

# Fonctions de visualisation
def create_salary_chart(df_filtered):
    """Cr√©e un graphique d'√©volution salariale."""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # Cr√©er des donn√©es pour le graphique
    experience = df_filtered['Exp√©rience'].tolist()
    min_salary = df_filtered['Salaire_Min'].tolist()
    max_salary = df_filtered['Salaire_Max'].tolist()
    avg_salary = df_filtered['Salaire_Moyen'].tolist()
    
    # Tracer les lignes et l'aire entre min et max
    x = range(len(experience))
    ax.plot(x, avg_salary, marker='o', linestyle='-', color=PRIMARY_COLOR, linewidth=2, label='Salaire moyen')
    ax.fill_between(x, min_salary, max_salary, alpha=0.2, color=PRIMARY_COLOR, label='Fourchette salariale')
    
    # Personnaliser le graphique
    ax.set_ylabel('Salaire annuel brut (‚Ç¨)', fontsize=12)
    ax.set_xlabel('Exp√©rience', fontsize=12)
    ax.set_xticks(x)
    ax.set_xticklabels(experience)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()
    
    # Ajouter les valeurs
    for i, (min_val, avg_val, max_val) in enumerate(zip(min_salary, avg_salary, max_salary)):
        ax.annotate(f"{avg_val}‚Ç¨", (i, avg_val), textcoords="offset points", 
                    xytext=(0,10), ha='center', fontweight='bold')
    
    plt.tight_layout()
    return fig

def generate_salary_report_pdf(user_data, salary_data, filepath):
    """
    G√©n√®re un rapport PDF attrayant avec les donn√©es salariales et le profil utilisateur.
    
    Args:
        user_data (dict): Donn√©es du profil utilisateur
        salary_data (DataFrame): Donn√©es salariales filtr√©es pour le m√©tier choisi
        filepath (str): Chemin o√π sauvegarder le PDF
    """
    # Pr√©parer les donn√©es
    metier = user_data.get("metier", "M√©tier ESG")
    niveau_etudes = user_data.get("niveau_etudes", "")
    formation = user_data.get("formation", "")
    experience = user_data.get("experience", "")
    interets = user_data.get("interets", [])
    interets_str = ", ".join(interets) if interets else ""
    prenom = user_data.get("prenom", "")
    nom = user_data.get("nom", "")
    
    # Cr√©er un fichier temporaire pour le graphique
    temp_img_path = os.path.join(tempfile.gettempdir(), f"temp_graph_{datetime.now().strftime('%Y%m%d%H%M%S')}.png")
    
    # Pr√©parer les donn√©es du graphique
    df_filtered = salary_data
    
    # G√©n√©rer le graphique et le sauvegarder dans un fichier temporaire
    fig = create_salary_chart(df_filtered)
    fig.savefig(temp_img_path, format='png', dpi=300, bbox_inches='tight')
    
    # Cr√©er le PDF
    c = canvas.Canvas(filepath, pagesize=A4)
    width, height = A4
    
    # En-t√™te
    c.setFillColor(colors.HexColor(PRIMARY_COLOR))
    c.rect(0, height - 2*cm, width, 2*cm, fill=1)
    c.setFillColor(colors.white)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(1*cm, height - 1.3*cm, "Institut d'√âconomie Durable")
    
    # Sous-titre
    c.setFillColor(colors.HexColor(PRIMARY_COLOR))
    c.setFont("Helvetica-Bold", 14)
    c.drawString(1*cm, height - 3*cm, "Rapport de Perspectives Salariales ESG")
    
    # Date
    c.setFont("Helvetica", 10)
    today = datetime.now().strftime("%d/%m/%Y")
    c.drawString(width - 3*cm, height - 3*cm, f"Date: {today}")
    
    # Informations sur le profil
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*cm, height - 4*cm, f"Profil de {prenom} {nom}")
    
    c.setFont("Helvetica", 10)
    y_position = height - 4.5*cm
    c.drawString(1*cm, y_position, f"Niveau d'√©tudes: {niveau_etudes}")
    y_position -= 0.5*cm
    c.drawString(1*cm, y_position, f"Formation: {formation}")
    y_position -= 0.5*cm
    c.drawString(1*cm, y_position, f"Exp√©rience: {experience}")
    y_position -= 0.5*cm
    c.drawString(1*cm, y_position, f"Centres d'int√©r√™t: {interets_str}")
    
    # M√©tier analys√©
    y_position -= 1*cm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*cm, y_position, f"M√©tier analys√©: {metier}")
    
    # Description du m√©tier
    description = ""
    if not df_filtered.empty and 'Description' in df_filtered.columns:
        description = df_filtered['Description'].iloc[0]
    
    if description:
        y_position -= 0.7*cm
        c.setFont("Helvetica-Oblique", 10)
        # G√©rer le texte long en le divisant
        text = description
        max_width = width - 2*cm
        words = text.split()
        line = ""
        for word in words:
            test_line = line + word + " "
            if c.stringWidth(test_line, "Helvetica-Oblique", 10) < max_width:
                line = test_line
            else:
                c.drawString(1*cm, y_position, line)
                y_position -= 0.5*cm
                line = word + " "
        c.drawString(1*cm, y_position, line)
    
    # Graphique d'√©volution salariale
    y_position -= 1.5*cm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*cm, y_position, f"√âvolution salariale: {metier}")
    
    y_position -= 0.7*cm
    # Ins√©rer le graphique enregistr√© dans un fichier temporaire
    c.drawImage(temp_img_path, 1*cm, y_position - 10*cm, width=width - 2*cm, height=10*cm)
    
    # Tableau des salaires
    y_position -= 11*cm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*cm, y_position, "D√©tail des salaires")
    
    if not df_filtered.empty:
        # Pr√©parer les donn√©es du tableau
        data = [['Exp√©rience', 'Minimum (‚Ç¨)', 'Maximum (‚Ç¨)', 'Moyen (‚Ç¨)']]
        for _, row in df_filtered.iterrows():
            data.append([
                row['Exp√©rience'], 
                f"{row['Salaire_Min']}‚Ç¨", 
                f"{row['Salaire_Max']}‚Ç¨", 
                f"{row['Salaire_Moyen']}‚Ç¨"
            ])
        
        # Cr√©er le tableau
        y_position -= 0.7*cm
        table = Table(data, colWidths=[3*cm, 3*cm, 3*cm, 3*cm])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(PRIMARY_COLOR)),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        # Dessiner le tableau
        table.wrapOn(c, width, height)
        table.drawOn(c, 1*cm, y_position - 2*cm)
    
    # Informations sur les formations
    y_position -= 3.5*cm
    c.setFont("Helvetica-Bold", 12)
    c.drawString(1*cm, y_position, "Formations recommand√©es √† l'Institut d'√âconomie Durable")
    
    y_position -= 0.7*cm
    c.setFont("Helvetica", 10)
    
    # Formations recommand√©es en fonction du m√©tier
    formations_recommandees = {
        "Analyste ESG": ["Master Finance Durable", "Certification Analyse ESG"],
        "Responsable ESG": ["Executive MBA RSE & Impact", "Master Strat√©gie ESG"],
        "Consultant D√©veloppement Durable": ["Master Conseil en D√©veloppement Durable", "Programme Strat√©gies Durables"],
        "Chef de Projet RSE": ["Master Management RSE", "Certification Gestion de Projets Durables"],
        "Ing√©nieur Efficacit√© √ânerg√©tique": ["Master Transition √ânerg√©tique", "Programme Efficacit√© √ânerg√©tique"],
        "Charg√© de Mission Biodiversit√©": ["Master Biodiversit√© & √âcosyst√®mes", "Programme Gestion des Espaces Naturels"],
        "Responsable Achats Durables": ["Master Supply Chain Durable", "Certification Achats Responsables"],
        "Expert √âconomie Circulaire": ["Master √âconomie Circulaire", "Programme Z√©ro D√©chet"],
        "Directeur RSE": ["Executive MBA RSE & Impact", "Programme Leadership Durable"],
        "Data Analyst ESG": ["Master Data Science pour l'ESG", "Certification Analyse de Donn√©es Durables"]
    }
    
    formations = formations_recommandees.get(metier, ["Master √âconomie Durable", "Certification RSE"])
    
    for formation in formations:
        c.drawString(1*cm, y_position, f"‚Ä¢ {formation}")
        y_position -= 0.5*cm
    
    y_position -= 0.5*cm
    c.setFont("Helvetica-Italic", 9)
    c.drawString(1*cm, y_position, "Pour plus d'informations sur nos formations, visitez notre site web ou contactez-nous.")
    
    # Pied de page
    c.setFillColor(colors.HexColor(PRIMARY_COLOR))
    c.rect(0, 0, width, 1*cm, fill=1)
    c.setFillColor(colors.white)
    c.setFont("Helvetica", 8)
    c.drawString(1*cm, 0.4*cm, "¬© Institut d'√âconomie Durable - Tous droits r√©serv√©s")
    c.drawString(width - 7*cm, 0.4*cm, "contact@ied-formation.fr | www.ied-formation.fr")
    
    # Finaliser le PDF
    c.save()
    
    # Supprimer le fichier temporaire de l'image
    try:
        os.remove(temp_img_path)
    except:
        pass
    
    return filepath

def send_results_email(recipient_email, pdf_path, user_data):
    """
    Envoie les r√©sultats par email avec le PDF en pi√®ce jointe.
    
    Args:
        recipient_email (str): Email du destinataire
        pdf_path (str): Chemin vers le fichier PDF √† joindre
        user_data (dict): Donn√©es utilisateur pour personnaliser l'email
    
    Returns:
        bool: True si l'email a √©t√© envoy√© avec succ√®s, False sinon
    """
    # En mode simulation/d√©veloppement
    if True:  # √Ä remplacer par une v√©rification d'environnement en production
        # Simuler l'envoi d'email et journaliser
        log_email_send(recipient_email, user_data)
        return True
    
    # Code pour l'envoi r√©el d'emails (√† activer en production)
    try:
        # Cr√©er le message
        msg = MIMEMultipart()
        msg['From'] = "noreply@ied-formation.fr"
        msg['To'] = recipient_email
        msg['Subject'] = f"Votre rapport de perspectives salariales ESG - {user_data.get('metier', 'M√©tier durable')}"
        
        # Corps de l'email
        prenom = user_data.get("prenom", "")
        metier = user_data.get("metier", "")
        
        email_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; color: #333;">
            <div style="padding: 20px; max-width: 600px; margin: 0 auto;">
                <div style="background-color: #003366; padding: 20px; color: white; text-align: center;">
                    <h1>Institut d'√âconomie Durable</h1>
                </div>
                <div style="padding: 20px; border: 1px solid #ddd; border-top: none;">
                    <p>Bonjour {prenom},</p>
                    <p>Nous vous remercions d'avoir utilis√© notre calculateur de carri√®re ESG.</p>
                    <p>Vous trouverez ci-joint votre rapport personnalis√© concernant les perspectives salariales du m√©tier <strong>{metier}</strong>.</p>
                    <p>Ce rapport contient :</p>
                    <ul>
                        <li>L'√©volution salariale selon l'exp√©rience</li>
                        <li>Les formations recommand√©es √† l'Institut d'√âconomie Durable</li>
                        <li>Des informations pratiques pour votre orientation professionnelle</li>
                    </ul>
                    <p>Notre √©quipe p√©dagogique reste √† votre disposition pour r√©pondre √† toutes vos questions concernant nos formations aux m√©tiers de l'√©conomie durable.</p>
                    <p>Cordialement,</p>
                    <p><strong>L'√©quipe de l'Institut d'√âconomie Durable</strong></p>
                </div>
                <div style="font-size: 12px; color: #666; margin-top: 20px; text-align: center;">
                    <p>¬© Institut d'√âconomie Durable - Tous droits r√©serv√©s</p>
                    <p>Vous recevez cet email car vous avez utilis√© notre calculateur de carri√®re ESG.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Attacher le corps HTML
        part = MIMEText(email_body, 'html')
        msg.attach(part)
        
        # Attacher le PDF
        with open(pdf_path, 'rb') as f:
            part = MIMEApplication(f.read(), Name=os.path.basename(pdf_path))
            part['Content-Disposition'] = f'attachment; filename="{os.path.basename(pdf_path)}"'
            msg.attach(part)
        
        # Configurer le serveur SMTP
        # En production, utiliser des variables d'environnement
        smtp_server = os.environ.get("SMTP_SERVER", "smtp.example.com")
        smtp_port = int(os.environ.get("SMTP_PORT", "587"))
        smtp_username = os.environ.get("SMTP_USERNAME", "")
        smtp_password = os.environ.get("SMTP_PASSWORD", "")
        
        # √âtablir une connexion s√©curis√©e
        context = ssl.create_default_context()
        
        # Envoyer l'email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls(context=context)
            server.login(smtp_username, smtp_password)
            server.send_message(msg)
        
        # Journaliser l'envoi
        log_email_send(recipient_email, user_data)
        
        return True
    
    except Exception as e:
        st.error(f"Erreur lors de l'envoi de l'email: {str(e)}")
        return False

def log_email_send(recipient_email, user_data):
    """
    Journalise l'envoi d'email pour un suivi des leads et future importation Hubspot.
    
    Args:
        recipient_email (str): Email du destinataire
        user_data (dict): Donn√©es de l'utilisateur
    """
    log_file = "logs/email_sends.csv"
    file_exists = os.path.isfile(log_file)
    
    # Pr√©parer les donn√©es du lead
    lead_data = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "email": recipient_email,
        "prenom": user_data.get("prenom", ""),
        "nom": user_data.get("nom", ""),
        "telephone": user_data.get("telephone", ""),
        "niveau_etudes": user_data.get("niveau_etudes", ""),
        "formation": user_data.get("formation", ""),
        "experience": user_data.get("experience", ""),
        "interets": ",".join(user_data.get("interets", [])),
        "metier_interesse": user_data.get("metier", ""),
        "source": "Calculateur ESG",
        "consentement_rgpd": "Oui"
    }
    
    # √âcrire dans le fichier CSV
    with open(log_file, mode='a', newline='', encoding='utf-8') as f:
        fieldnames = lead_data.keys()
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        
        if not file_exists:
            writer.writeheader()
        
        writer.writerow(lead_data)

def send_to_hubspot(lead_data):
    """
    Envoie les donn√©es du lead √† Hubspot (fonction squelette √† impl√©menter quand Hubspot sera disponible).
    
    Args:
        lead_data (dict): Donn√©es du lead √† envoyer √† Hubspot
    
    Returns:
        bool: True si l'envoi a r√©ussi, False sinon
    """
    # Ce code est un squelette √† compl√©ter quand Hubspot sera disponible
    try:
        # Exemple de structure pour une future int√©gration Hubspot
        hubspot_data = {
            "properties": {
                "email": lead_data.get("email", ""),
                "firstname": lead_data.get("prenom", ""),
                "lastname": lead_data.get("nom", ""),
                "phone": lead_data.get("telephone", ""),
                "niveau_etudes": lead_data.get("niveau_etudes", ""),
                "formation_actuelle": lead_data.get("formation", ""),
                "experience": lead_data.get("experience", ""),
                "interets_esg": lead_data.get("interets", ""),
                "metier_interesse": lead_data.get("metier", ""),
                "source": "Calculateur ESG",
                "hs_legal_basis": "Legitimate interest",
                "consentement_communications": True if lead_data.get("consentement_rgpd") == "Oui" else False
            }
        }
        
        # Ici viendra le code d'appel √† l'API Hubspot
        # Ex: requests.post('https://api.hubapi.com/crm/v3/objects/contacts', json=hubspot_data, headers=headers)
        
        return True
    
    except Exception as e:
        print(f"Erreur lors de l'envoi √† Hubspot: {str(e)}")
        return False

# Fonctions d'interface utilisateur
def display_progress_bar(percent):
    """Affiche une barre de progression."""
    st.markdown(
        f"""
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-bar-fill" style="width: {percent}%;"></div>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

def display_header(step):
    """Affiche l'en-t√™te avec logo et titre."""
    col1, col2 = st.columns([1, 5])
    
    with col1:
        st.markdown("""
        <div class="logo-container">
            <h3>üå± IED</h3>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="title-container">
            <h1>Calculateur de Carri√®re en √âconomie Durable</h1>
        </div>
        """, unsafe_allow_html=True)
    
    # D√©terminer le pourcentage de progression en fonction de l'√©tape
    progress_percent = {
        "accueil": 5,
        "profil": 33,
        "metier": 66,
        "resultats": 100
    }
    
    display_progress_bar(progress_percent.get(step, 0))

def page_accueil():
    """Affiche la page d'accueil."""
    display_header("accueil")
    
    st.markdown("""
    ## D√©couvrez votre potentiel de carri√®re dans l'√©conomie durable
    
    Bienvenue sur le calculateur de carri√®re de l'**Institut d'√âconomie Durable**. 
    Cet outil vous permet de visualiser les perspectives salariales et d'√©volution des m√©tiers 
    de la transition √©cologique et sociale.
    
    ### Comment √ßa marche ?
    
    1. **Parlez-nous de vous** - Votre niveau d'√©tudes, votre formation actuelle
    2. **Explorez les m√©tiers** - D√©couvrez les secteurs et m√©tiers qui vous correspondent
    3. **Analysez vos r√©sultats** - Visualisez les perspectives d'√©volution salariale
    
    ### Pourquoi l'√©conomie durable ?
    
    Les m√©tiers de la durabilit√© sont parmi les plus prometteurs pour les ann√©es √† venir. 
    Avec une croissance estim√©e √† 20% par an, ce secteur offre des opportunit√©s diversifi√©es 
    pour contribuer positivement √† la transition √©cologique tout en d√©veloppant une carri√®re √©panouissante.
    """)
    
    # Bouton pour d√©marrer
    if st.button("Commencer l'exploration ‚û°Ô∏è"):
        # Initialiser la session
        st.session_state.step = "profil"
        st.rerun()

def page_profil():
    """Affiche la page du profil utilisateur."""
    display_header("profil")
    
    st.markdown("## √âtape 1: Parlez-nous de vous")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Niveau d'√©tudes
        niveau_etudes = st.selectbox(
            "Quel est votre niveau d'√©tudes actuel ou vis√© ?",
            options=["Bac", "Bac+2 / Bac+3", "Bac+4 / Bac+5", "Bac+6 et plus"],
            key="niveau_etudes"
        )
        
        # Formation
        formation = st.selectbox(
            "Dans quel domaine √™tes-vous form√©(e) ?",
            options=["Commerce/Gestion", "Ing√©nierie/Technique", "Sciences Humaines", 
                    "Droit", "Finance", "Sciences", "Autre"],
            key="formation"
        )
    
    with col2:
        # Exp√©rience
        experience = st.radio(
            "Quelle exp√©rience professionnelle avez-vous ?",
            options=["Aucune (√©tudiant)", "Stage/Alternance", "0-2 ans", "2-5 ans", "5-10 ans", "10+ ans"],
            key="experience"
        )
        
        # Int√©r√™t ESG
        interet_esg = st.multiselect(
            "Quels aspects de l'ESG vous int√©ressent le plus ?",
            options=["Environnement", "Social", "Gouvernance", "Finance durable", "√âconomie circulaire", 
                    "Biodiversit√©", "Transition √©nerg√©tique"],
            key="interet_esg"
        )
    
    # Navigation
    col1, col2 = st.columns([1, 1])
    
    with col2:
        if st.button("√âtape suivante ‚û°Ô∏è"):
            # V√©rification que les champs sont remplis
            if "interet_esg" in st.session_state and len(st.session_state.interet_esg) > 0:
                st.session_state.step = "metier"
                st.rerun()
            else:
                st.error("Veuillez s√©lectionner au moins un centre d'int√©r√™t.")

def page_metier():
    """Affiche la page de s√©lection du m√©tier."""
    display_header("metier")
    
    st.markdown("## √âtape 2: Explorez les m√©tiers de l'√©conomie durable")
    
    # Charger les donn√©es
    m√©tiers_par_secteur = get_m√©tiers_par_secteur()
    
    col1, col2 = st.columns(2)
    
    with col1:
        # S√©lection du secteur
        secteur_selectionne = st.selectbox(
            "Dans quel secteur souhaitez-vous travailler ?",
            options=list(m√©tiers_par_secteur.keys()),
            key="secteur"
        )
    
    with col2:
        # S√©lection du m√©tier bas√©e sur le secteur
        metier_selectionne = st.selectbox(
            "Quel m√©tier vous int√©resse ?",
            options=m√©tiers_par_secteur[secteur_selectionne],
            key="metier"
        )
    
    # Afficher la description du m√©tier
    df = load_data()
    description = df[df['M√©tier'] == metier_selectionne]['Description'].iloc[0]
    
    st.markdown("### Description du m√©tier")
    st.info(description)
    
    # Navigation
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button("‚¨ÖÔ∏è √âtape pr√©c√©dente"):
            st.session_state.step = "profil"
            st.rerun()
    
    with col2:
        if st.button("Voir les r√©sultats ‚û°Ô∏è"):
            st.session_state.step = "resultats"
            st.rerun()

def page_resultats():
    """Affiche la page des r√©sultats."""
    display_header("resultats")
    
    st.markdown("## √âtape 3: Vos perspectives de carri√®re")
    
    # R√©cup√©rer les donn√©es de session
    metier_selectionne = st.session_state.get("metier", "Analyste ESG")
    niveau_etudes = st.session_state.get("niveau_etudes", "Bac+4 / Bac+5")
    interets = st.session_state.get("interet_esg", ["Environnement"])
    formation = st.session_state.get("formation", "")
    experience = st.session_state.get("experience", "")
    
    # Charger et filtrer les donn√©es
    df = load_data()
    df_filtered = df[df['M√©tier'] == metier_selectionne]
    
    # Afficher le r√©sum√© du profil
    st.markdown("### Votre profil")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**Niveau d'√©tudes**: {niveau_etudes}")
        st.markdown(f"**Formation**: {formation}")
        st.markdown(f"**M√©tier cibl√©**: {metier_selectionne}")
    
    with col2:
        st.markdown(f"**Exp√©rience**: {experience}")
        st.markdown(f"**Centres d'int√©r√™t**: {', '.join(interets)}")
    
    # Statut pour suivre l'envoi d'email
    if "email_sent" not in st.session_state:
        st.session_state.email_sent = False
    
    # Compteurs pour le suivi des conversions
    if "pdf_count" not in st.session_state:
        st.session_state.pdf_count = 0
    if "email_count" not in st.session_state:
        st.session_state.email_count = 0
    
    # Afficher le bloc de capture d'email AVANT les r√©sultats d√©taill√©s
    if not st.session_state.email_sent:
        st.markdown("---")
        
        # Utiliser la classe CSS personnalis√©e pour le bloc de capture
        st.markdown('<div class="lead-capture-box">', unsafe_allow_html=True)
        
        # Titre attractif avec ic√¥ne
        st.markdown(f"### üìä Recevez votre rapport de carri√®re personnalis√©")
        
        # Message cibl√© et concis
        st.markdown(f"Obtenez une analyse d√©taill√©e des perspectives salariales, des comp√©tences requises et des formations recommand√©es pour le m√©tier de **{metier_selectionne}**.")
        
        # Formulaire simplifi√©
        with st.form("contact_form"):
            col1, col2 = st.columns([1, 1])
            
            with col1:
                prenom = st.text_input("Pr√©nom", placeholder="Votre pr√©nom")
                email = st.text_input("Email", placeholder="votre.email@exemple.com")
            
            with col2:
                # Champs additionnels cach√©s initialement ou affich√©s diff√©remment
                nom = st.text_input("Nom (optionnel)", placeholder="Votre nom")
                # On pourrait aussi utiliser un expander pour les champs optionnels
                # with st.expander("Informations compl√©mentaires (optionnel)"):
                #    telephone = st.text_input("T√©l√©phone")
            
            # RGPD simplifi√©
            rgpd_consent = st.checkbox(
                "J'accepte de recevoir mon rapport et des informations sur les formations IED"
            )
            
            # Bouton d'action clair avec style personnalis√©
            col_button = st.columns(1)[0]
            with col_button:
                submitted = st.form_submit_button("üì© Recevoir mon rapport complet", 
                                                 use_container_width=True)
            
            if submitted:
                if email and prenom and rgpd_consent:
                    with st.spinner("G√©n√©ration de votre rapport en cours..."):
                        # Pr√©parer les donn√©es utilisateur
                        user_data = {
                            "prenom": prenom,
                            "nom": nom,
                            "email": email,
                            "telephone": "",
                            "niveau_etudes": niveau_etudes,
                            "formation": formation,
                            "experience": experience,
                            "interets": interets,
                            "metier": metier_selectionne,
                            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            "rgpd_consent": "Oui" if rgpd_consent else "Non"
                        }
                        
                        # G√©n√©rer un nom de fichier unique
                        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                        pdf_filename = f"rapport_carriere_{metier_selectionne.replace(' ', '_').lower()}_{timestamp}.pdf"
                        pdf_path = os.path.join(tempfile.gettempdir(), pdf_filename)
                        
                        # G√©n√©rer le PDF
                        generate_salary_report_pdf(user_data, df_filtered, pdf_path)
                        st.session_state.pdf_count += 1
                        
                        # Envoyer l'email avec le PDF (simul√© en mode d√©veloppement)
                        if send_results_email(email, pdf_path, user_data):
                            st.session_state.email_count += 1
                            st.session_state.email_sent = True
                            st.session_state.lead_saved = user_data
                            
                            st.success("‚úÖ Votre rapport a √©t√© g√©n√©r√© et vous sera envoy√© dans quelques instants ! Voici un aper√ßu des r√©sultats ci-dessous.")
                            
                            # Pr√©parer pour Hubspot (√† impl√©menter plus tard)
                            # send_to_hubspot(user_data)
                        else:
                            st.error("Une erreur est survenue lors de l'envoi de l'email. Veuillez r√©essayer plus tard.")
                else:
                    st.error("Veuillez remplir votre pr√©nom, email et accepter les conditions.")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Message de confirmation permanent apr√®s envoi
    if st.session_state.email_sent:
        st.success("‚úÖ Votre rapport complet a √©t√© envoy√© ! Consultez vos emails pour plus de d√©tails sur les formations et l'√©volution de carri√®re.")
    
    st.markdown("---")
    
    # Afficher les r√©sultats
    st.markdown("### Perspectives salariales")
    
    col1, col2 = st.columns([3, 2])
    
    with col1:
        # Graphique d'√©volution salariale
        fig = create_salary_chart(df_filtered)
        st.pyplot(fig)
        
        # Teaser si le rapport a √©t√© envoy√©
        if st.session_state.email_sent:
            st.info("üìù **Votre rapport PDF contient des informations suppl√©mentaires** sur les comp√©tences requises et l'√©volution de carri√®re.")
    
    with col2:
        # Tableau des donn√©es
        st.markdown("#### D√©tail des salaires")
        st.dataframe(
            df_filtered[['Exp√©rience', 'Salaire_Min', 'Salaire_Max', 'Salaire_Moyen']].rename(
                columns={
                    'Salaire_Min': 'Minimum (‚Ç¨)',
                    'Salaire_Max': 'Maximum (‚Ç¨)',
                    'Salaire_Moyen': 'Moyen (‚Ç¨)'
                }
            ),
            hide_index=True,
            use_container_width=True
        )
    
    # Navigation (seulement si n√©cessaire)
    st.markdown("---")
    
    # Statistiques de conversion (visibles uniquement en mode d√©veloppement)
    if st.session_state.email_sent and st.checkbox("Afficher les statistiques de conversion", value=False):
        st.info(f"PDFs g√©n√©r√©s: {st.session_state.pdf_count}, Emails envoy√©s: {st.session_state.email_count}")
    
    # Option pour recommencer 
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("‚¨ÖÔ∏è Revenir √† la s√©lection du m√©tier"):
            st.session_state.step = "metier"
            st.rerun()
    
    with col2:
        if st.session_state.email_sent and st.button("üîÑ Recommencer l'exploration"):
            # Conserver les statistiques et les donn√©es lead mais r√©initialiser le parcours
            for key in list(st.session_state.keys()):
                if key not in ['pdf_count', 'email_count', 'lead_saved']:
                    if key in st.session_state:
                        del st.session_state[key]
            st.session_state.step = "accueil"
            st.rerun()

# Application principale
def main():
    """Fonction principale de l'application."""
    # Charger le CSS personnalis√©
    load_custom_css()
    
    # Initialiser la session si n√©cessaire
    if "step" not in st.session_state:
        st.session_state.step = "accueil"
    
    # Afficher la page correspondante √† l'√©tape actuelle
    if st.session_state.step == "accueil":
        page_accueil()
    elif st.session_state.step == "profil":
        page_profil()
    elif st.session_state.step == "metier":
        page_metier()
    elif st.session_state.step == "resultats":
        page_resultats()

# Point d'entr√©e
if __name__ == "__main__":
    main()